{"version":3,"sources":["alphabets.js","App.js","reportWebVitals.js","index.js"],"names":["alphabetRu","States","initialState","screen","score","gameId","getGameId","MainMenuScreen","onStart","ScreenWrapper","mb","textAlign","fontSize","autoFocus","onClick","joinedAlphabet","join","GameScreen","onRestart","onFinish","useState","setScore","inputValue","setInputValue","gameStarted","setGameStarted","countDown","setCountDown","useEffect","interval","setTimeout","clearTimeout","startTime","Date","now","intervalId","setInterval","clearInterval","toLowerCase","alignSelf","Result","Alphabet","alphabet","value","onChange","e","target","ScoreScreen","as","href","toFixed","aria-label","rightIcon","colorScheme","children","h","pb","pt","display","flexDirection","justifyContent","alignItems","memo","map","letter","i","color","undefined","toUpperCase","App","gameState","setGameState","Error","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4670edd4.chunk.js","sourcesContent":["export const alphabetRu = [\n  \"а\",\n  \"б\",\n  \"в\",\n  \"г\",\n  \"д\",\n  \"е\",\n  \"ё\",\n  \"ж\",\n  \"з\",\n  \"и\",\n  \"й\",\n  \"к\",\n  \"л\",\n  \"м\",\n  \"н\",\n  \"о\",\n  \"п\",\n  \"р\",\n  \"с\",\n  \"т\",\n  \"у\",\n  \"ф\",\n  \"х\",\n  \"ц\",\n  \"ч\",\n  \"ш\",\n  \"щ\",\n  \"ъ\",\n  \"ы\",\n  \"ь\",\n  \"э\",\n  \"ю\",\n  \"я\",\n];\n","import { useEffect, useState, memo } from \"react\";\nimport { Input, Container, Button, Text, Box, Stack } from \"@chakra-ui/react\";\nimport { FaTwitter } from \"react-icons/fa\";\nimport { alphabetRu } from \"./alphabets\";\n\nconst States = {\n  MainMenu: \"main-menu\",\n  Game: \"game\",\n  ScoreBoard: \"score-board\",\n};\n\nconst initialState = {\n  screen: States.ScoreBoard,\n  score: 3000,\n};\n\nlet gameId = 0;\nconst getGameId = () => gameId++;\n\nfunction App() {\n  const [gameState, setGameState] = useState(initialState);\n\n  switch (gameState.screen) {\n    case States.MainMenu:\n      return (\n        <MainMenuScreen\n          onStart={() =>\n            setGameState({\n              screen: States.Game,\n              gameId: getGameId(),\n            })\n          }\n        />\n      );\n    case States.Game:\n      return (\n        <GameScreen\n          key={gameId}\n          onRestart={() =>\n            setGameState({\n              screen: States.Game,\n              gameId: getGameId(),\n            })\n          }\n          onFinish={(score) =>\n            setGameState({ screen: States.ScoreBoard, score })\n          }\n        />\n      );\n    case States.ScoreBoard:\n      return (\n        <ScoreScreen\n          score={gameState.score}\n          onRestart={() =>\n            setGameState({\n              screen: States.Game,\n              gameId: getGameId(),\n            })\n          }\n        />\n      );\n    default:\n      throw new Error(\"Unknown game state:\", gameState);\n  }\n}\n\nfunction MainMenuScreen({ onStart }) {\n  return (\n    <ScreenWrapper>\n      <Text mb={8} textAlign=\"center\" fontSize=\"xl\">\n        Узнай, как быстро ты сможешь набрать весь алфавит на клавиатуре\n      </Text>\n      <Button autoFocus onClick={onStart}>\n        Поехали!\n      </Button>\n    </ScreenWrapper>\n  );\n}\n\nconst joinedAlphabet = alphabetRu.join(\"\");\n\nfunction GameScreen({ onRestart, onFinish }) {\n  const [score, setScore] = useState(0);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [gameStarted, setGameStarted] = useState(false);\n  const [countDown, setCountDown] = useState(3);\n\n  useEffect(() => {\n    if (countDown === 0) {\n      setGameStarted(true);\n      return;\n    }\n    const interval = setTimeout(() => {\n      setCountDown((countDown) => countDown - 1);\n    }, 1000);\n    return () => clearTimeout(interval);\n  }, [countDown, gameStarted]);\n\n  useEffect(() => {\n    if (!gameStarted) {\n      return;\n    }\n\n    const startTime = Date.now();\n    const intervalId = setInterval(() => {\n      setScore(Date.now() - startTime);\n    }, 1);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [gameStarted]);\n\n  useEffect(() => {\n    if (inputValue.toLowerCase() === joinedAlphabet) {\n      onFinish(score);\n    }\n  }, [inputValue, onFinish, score]);\n\n  if (!gameStarted) {\n    return (\n      <ScreenWrapper>\n        <Text fontSize=\"9xl\">{countDown}</Text>\n      </ScreenWrapper>\n    );\n  }\n\n  return (\n    <ScreenWrapper>\n      <Box mb={4} alignSelf=\"flex-end\">\n        <Result score={score} />\n      </Box>\n      <Box mb={4}>\n        <Alphabet alphabet={alphabetRu} inputValue={inputValue} />\n      </Box>\n      <Input\n        value={inputValue}\n        onChange={(e) => setInputValue(e.target.value)}\n        mb={8}\n        autoFocus\n      />\n      <Button onClick={onRestart}>Попробовать снова</Button>\n    </ScreenWrapper>\n  );\n}\n\nfunction ScoreScreen({ score, onRestart }) {\n  return (\n    <ScreenWrapper>\n      <Text mb={8} textAlign=\"center\" fontSize=\"xl\" alignSelf>\n        <Result score={score} />\n      </Text>\n      <Stack>\n        <Button onClick={onRestart}>Попробовать снова</Button>\n        <Button\n          as=\"a\"\n          href={\n            \"https://twitter.com/intent/tweet?text=\" +\n            \"Я набрал русский алфавит на клавиатуре за \" +\n            (score / 1000).toFixed(2) +\n            \" сек. \" +\n            \"Проверь себя тут: https://nanot1m.github.io/alphabet-typer/\"\n          }\n          aria-label=\"tweet\"\n          rightIcon={<FaTwitter />}\n          colorScheme=\"blue\"\n          target=\"_blank\"\n        >\n          Поделиться\n        </Button>\n      </Stack>\n    </ScreenWrapper>\n  );\n}\n\nfunction ScreenWrapper({ children }) {\n  return (\n    <Container\n      h=\"full\"\n      pb={16}\n      pt={8}\n      display=\"flex\"\n      flexDirection=\"column\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n    >\n      {children}\n    </Container>\n  );\n}\n\nconst Alphabet = memo(({ alphabet, inputValue }) => {\n  return (\n    <Box display=\"flex\">\n      {alphabet.map((letter, i) => (\n        <Text\n          key={letter}\n          fontSize={[\"l\", \"xl\", \"x-large\"]}\n          color={\n            inputValue[i] === undefined\n              ? \"gray.400\"\n              : inputValue[i]?.toLowerCase() === letter\n              ? \"gray.800\"\n              : \"red\"\n          }\n        >\n          {letter.toUpperCase()}\n        </Text>\n      ))}\n    </Box>\n  );\n});\n\nfunction Result({ score }) {\n  return (\n    <Box>\n      <Text textAlign=\"left\" fontSize=\"xl\">\n        Твой результат\n      </Text>\n      <Text fontSize=\"xx-large\">{(score / 1000).toFixed(2)}</Text>\n      <Text fontSize=\"xl\">сек.</Text>\n    </Box>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}